{"version":3,"file":"main.js","mappings":"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","sources":["webpack://inclement-emerald-pokedex/./src/api/getSpecies.js","webpack://inclement-emerald-pokedex/./src/helpers/regexEvolution.js","webpack://inclement-emerald-pokedex/./src/helpers/getEvolutionLine.js","webpack://inclement-emerald-pokedex/./src/helpers/altFormsLearnsets.js","webpack://inclement-emerald-pokedex/./src/helpers/buildPokemonObj.js","webpack://inclement-emerald-pokedex/./src/helpers/regexSpecies.js","webpack://inclement-emerald-pokedex/./src/helpers/initializePokemonObj.js","webpack://inclement-emerald-pokedex/./src/api/getEvolution.js","webpack://inclement-emerald-pokedex/./src/helpers/regexForms.js","webpack://inclement-emerald-pokedex/./src/api/getForms.js","webpack://inclement-emerald-pokedex/./src/helpers/regexBaseStats.js","webpack://inclement-emerald-pokedex/./src/api/getBaseStats.js","webpack://inclement-emerald-pokedex/./src/helpers/getLevelUpLearnsetsConversionTable.js","webpack://inclement-emerald-pokedex/./src/api/getLevelUpLearnsetsPointers.js","webpack://inclement-emerald-pokedex/./src/helpers/regexLevelUpLearnsets.js","webpack://inclement-emerald-pokedex/./src/api/getLevelUpLearnsets.js","webpack://inclement-emerald-pokedex/./src/helpers/regexTMHMLearnsets.js","webpack://inclement-emerald-pokedex/./src/api/getTMHMLearnsets.js","webpack://inclement-emerald-pokedex/./src/helpers/regexEggMovesLearnsets.js","webpack://inclement-emerald-pokedex/./src/api/getEggMovesLearnsets.js","webpack://inclement-emerald-pokedex/./src/index.js"],"sourcesContent":["async function getSpecies () {\n  const rawSpecies = await fetch('https://raw.githubusercontent.com/BuffelSaft/pokeemerald/master/include/constants/species.h')\n  const textSpecies = await rawSpecies.text()\n\n  return textSpecies\n}\n\nexport default getSpecies\n","import getEvolutionLine from './getEvolutionLine'\n\nfunction regexEvolution (textEvolution, pokemon) {\n  const lines = textEvolution.split('\\n')\n  let species\n\n  lines.forEach(line => {\n    const matchSpecies = line.match(/\\[ *(SPECIES_\\w+) *\\]/i)\n    if (matchSpecies !== null) { species = matchSpecies[1] }\n\n    const matchEvoInfo = line.match(/(\\w+), *(\\w+), *(\\w+)/)\n    if (matchEvoInfo !== null) {\n      const method = matchEvoInfo[1]\n      const condition = matchEvoInfo[2]\n      const targetSpecies = matchEvoInfo[3]\n      pokemon[species].evolution.push([method, condition, targetSpecies])\n    }\n  })\n\n  return getEvolutionLine(pokemon)\n}\n\nexport default regexEvolution\n","function getEvolutionLine (pokemon) {\n  for (const species of Object.keys(pokemon)) {\n    for (let j = 0; j < pokemon[species].evolution.length; j++) {\n      const targetSpecies = pokemon[species].evolution[j][2]\n      pokemon[species].evolutionLine.push(targetSpecies)\n    }\n\n    for (let j = 0; j < pokemon[species].evolution.length; j++) {\n      const targetSpecies = pokemon[species].evolution[j][2]\n      pokemon[targetSpecies].evolutionLine = pokemon[species].evolutionLine\n    }\n  }\n\n  for (const species of Object.keys(pokemon)) { pokemon[species].evolutionLine = Array.from(new Set(pokemon[species].evolutionLine)) } // remove duplicates\n\n  return pokemon\n}\n\nexport default getEvolutionLine\n","function altFormsLearnsets (pokemon, input, output) {\n  for (const species of Object.keys(pokemon)) {\n    if (pokemon[species][input].length >= 2) {\n      for (let j = 0; j < pokemon[species][input].length; j++) {\n        const targetSpecies = pokemon[species][input][j]\n\n        if (pokemon[targetSpecies][output].length <= 0) { pokemon[targetSpecies][output] = pokemon[species][output] }\n      }\n    }\n  }\n  return pokemon\n}\n\nexport default altFormsLearnsets\n","import getSpecies from '../api/getSpecies'\nimport regexSpecies from './regexSpecies'\n\nimport initializePokemonObj from './initializePokemonObj'\n\nimport getEvolution from '../api/getEvolution'\nimport regexEvolution from './regexEvolution'\n\nimport getForms from '../api/getForms'\nimport regexForms from './regexForms'\n\nimport getBaseStats from '../api/getBaseStats'\nimport regexBaseStats from './regexBaseStats'\n\nimport getLevelUpLearnsetsPointers from '../api/getLevelUpLearnsetsPointers'\nimport getLevelUpLearnsetsConversionTable from './getLevelUpLearnsetsConversionTable'\nimport getLevelUpLearnsets from '../api/getLevelUpLearnsets'\nimport regexLevelUpLearnsets from './regexLevelUpLearnsets'\n\nimport getTMHMLearnsets from '../api/getTMHMLearnsets'\nimport regexTMHMLearnsets from './regexTMHMLearnsets'\n\nimport getEggMovesLearnsets from '../api/getEggMovesLearnsets'\nimport regexEggMovesLearnsets from './regexEggMovesLearnsets'\n\nasync function buildPokemonObj () {\n  let pokemon = {}\n\n  const species = await getSpecies()\n  pokemon = regexSpecies(species, pokemon)\n\n  // This must be called here\n  pokemon = initializePokemonObj(pokemon)\n\n  const evolutions = await getEvolution()\n  pokemon = regexEvolution(evolutions, pokemon)\n\n  const forms = await getForms()\n  pokemon = regexForms(forms, pokemon)\n\n  const baseStats = await getBaseStats()\n  pokemon = regexBaseStats(baseStats, pokemon)\n\n  const pointers = await getLevelUpLearnsetsPointers()\n  const conversionTable = getLevelUpLearnsetsConversionTable(pointers)\n  const levelUpLearnsets = await getLevelUpLearnsets()\n  pokemon = regexLevelUpLearnsets(levelUpLearnsets, conversionTable, pokemon)\n\n  const TMHMLearnsets = await getTMHMLearnsets()\n  pokemon = regexTMHMLearnsets(TMHMLearnsets, pokemon)\n\n  const eggMovesLearnsets = await getEggMovesLearnsets()\n  pokemon = regexEggMovesLearnsets(eggMovesLearnsets, pokemon)\n\n  console.log(pokemon)\n}\n\nexport default buildPokemonObj\n","function regexSpecies (textSpecies, pokemon) {\n  const lines = textSpecies.split('\\n')\n  let formsStart = null; let ID = 0\n\n  lines.forEach(line => {\n    if (/#define *FORMS_START *\\w+/i.test(line)) { formsStart = ID }\n\n    const matchSpecies = line.match(/#define *(SPECIES_\\w+)/i)\n    if (matchSpecies !== null && /SPECIES_NONE /i.test(line) !== true && /SPECIES_EGG /i.test(line) !== true) {\n      const species = matchSpecies[1]\n\n      const matchInt = line.match(/\\d+/)\n      if (matchInt !== null) {\n        ID = parseInt(matchInt[0])\n\n        pokemon[species] = {}\n        pokemon[species].species = species\n\n        if (Number.isInteger(formsStart)) { pokemon[species].ID = ID + formsStart } else { pokemon[species].ID = ID }\n      }\n    }\n  })\n  return pokemon\n}\n\nexport default regexSpecies\n","function initializePokemonObj (pokemon) {\n  const pokemonValues = Object.values(pokemon)\n  for (let i = 0; i < pokemonValues.length; i++) {\n    const key = pokemonValues[i].species\n    pokemon[key].baseHP = 0\n    pokemon[key].baseAttack = 0\n    pokemon[key].baseDefense = 0\n    pokemon[key].baseSpAttack = 0\n    pokemon[key].baseSpDefense = 0\n    pokemon[key].baseSpeed = 0\n    pokemon[key].abilities = []\n    pokemon[key].type1 = ''\n    pokemon[key].type2 = ''\n    pokemon[key].item1 = ''\n    pokemon[key].item2 = ''\n    pokemon[key].eggGroup1 = ''\n    pokemon[key].eggGroup2 = ''\n    pokemon[key].changes = []\n    pokemon[key].levelUpLearnsets = []\n    pokemon[key].TMHMLearnsets = []\n    pokemon[key].eggMovesLearnsets = []\n    pokemon[key].evolution = []\n    pokemon[key].evolutionLine = [key]\n    pokemon[key].forms = []\n    pokemon[key].sprite = ''\n  }\n  return pokemon\n}\n\nexport default initializePokemonObj\n","async function getEvolution () {\n  const rawEvolution = await fetch('https://raw.githubusercontent.com/BuffelSaft/pokeemerald/master/src/data/pokemon/evolution.h')\n  const textEvolution = await rawEvolution.text()\n\n  return textEvolution\n}\n\nexport default getEvolution\n","function regexForms (textForms, pokemon) {\n  const lines = textForms.split('\\n')\n  let speciesArray = []\n\n  lines.forEach(line => {\n    const matchSpecies = line.match(/SPECIES_\\w+/i)\n\n    if (/FORM_SPECIES_END/i.test(line)) {\n      for (let i = 0; i < speciesArray.length; i++) { pokemon[speciesArray[i]].forms = speciesArray }\n      speciesArray = []\n    } else if (matchSpecies !== null) {\n      const species = matchSpecies[0]\n      speciesArray.push(species)\n    }\n  })\n  return pokemon\n}\n\nexport default regexForms\n","async function getForms () {\n  const rawForms = await fetch('https://raw.githubusercontent.com/BuffelSaft/pokeemerald/master/src/data/pokemon/form_species_tables.h')\n  const textForms = await rawForms.text()\n\n  return textForms\n}\n\nexport default getForms\n","function regexBaseStats (textBaseStats, pokemon) {\n  const lines = textBaseStats.split('\\n')\n\n  const regex = /baseHP|baseAttack|baseDefense|baseSpeed|baseSpAttack|baseSpDefense|type1|type2|item1|item2|eggGroup1|eggGroup2|abilities/i\n  let change = false; let value; let species\n\n  lines.forEach(line => {\n    if (/#else/i.test(line)) { change = true }\n    if (/#endif/i.test(line)) { change = false }\n\n    const matchSpecies = line.match(/SPECIES_\\w+/i)\n    if (matchSpecies !== null && /SPECIES_NONE/i.test(line) !== true) {\n      species = matchSpecies[0]\n      change = false\n    }\n\n    const matchRegex = line.match(regex)\n    if (matchRegex !== null) {\n      const match = matchRegex[0]\n\n      if (match === 'baseHP' || match === 'baseAttack' || match === 'baseDefense' || match === 'baseSpeed' || match === 'baseSpAttack' || match === 'baseSpDefense') {\n        const matchInt = line.match(/\\d+/)\n        if (matchInt !== null) { value = parseInt(matchInt[0]) }\n      } else if (match === 'type1' || match === 'type2' || match === 'item1' || match === 'item2' || match === 'eggGroup1' || match === 'eggGroup2') {\n        value = line.match(/\\w+_\\w+/i)\n        if (value !== null) { value = value[0] }\n      } else if (match === 'abilities') { value = line.match(/ABILITY_\\w+/ig) }\n\n      if (change === true) { pokemon[species].changes.push([match, value]) } else if (change === false) { pokemon[species][match] = value }\n    }\n  })\n\n  return pokemon\n}\n\nexport default regexBaseStats\n","async function getBaseStats () {\n  const rawBaseStats = await fetch('https://raw.githubusercontent.com/BuffelSaft/pokeemerald/master/src/data/pokemon/base_stats.h')\n  const textBaseStats = await rawBaseStats.text()\n  return textBaseStats\n}\n\nexport default getBaseStats\n","function getLevelUpLearnsetsConversionTable (textLevelUpLearnsetsPointers) {\n  const lines = textLevelUpLearnsetsPointers.split('\\n')\n  const conversionTable = {}\n\n  lines.forEach(line => {\n    const matchSpecies = line.match(/SPECIES_\\w+/i)\n    if (matchSpecies != null && /SPECIES_NONE/i.test(line) !== true) {\n      const value = matchSpecies[0]\n\n      const matchConversion = line.match(/s\\w+LevelUpLearnset/i)\n      if (matchConversion !== null) {\n        const index = matchConversion[0]\n\n        // DO NOT TOUCH THAT FUTURE ME, THIS IS THE WAY, DON'T QUESTION ME\n        if (conversionTable[index] === undefined) {\n          conversionTable[index] = [value]\n        } else {\n          conversionTable[index].push(value)\n        }\n      }\n    }\n  })\n  return conversionTable\n}\n\nexport default getLevelUpLearnsetsConversionTable\n","async function getLevelUpLearnsetsPointers () {\n  const rawLevelUpLearnsetsPointers = await fetch('https://raw.githubusercontent.com/BuffelSaft/pokeemerald/master/src/data/pokemon/level_up_learnset_pointers.h')\n  const textLevelUpLearnsetsPointers = await rawLevelUpLearnsetsPointers.text()\n\n  return textLevelUpLearnsetsPointers\n}\n\nexport default getLevelUpLearnsetsPointers\n","function regexLevelUpLearnsets (textLevelUpLearnsets, conversionTable, pokemon) {\n  const lines = textLevelUpLearnsets.split('\\n')\n  let species = []\n\n  lines.forEach(line => {\n    const matchConversion = line.match(/s\\w+LevelUpLearnset/i)\n    if (matchConversion !== null) {\n      const index = matchConversion[0]\n      species = conversionTable[index]\n    }\n\n    const matchLevelMove = line.match(/(\\d+) *, *(MOVE_\\w+)/i)\n    if (matchLevelMove !== null) {\n      const level = parseInt(matchLevelMove[1])\n      const move = matchLevelMove[2]\n      for (let i = 0; i < species.length; i++) { pokemon[species[i]].levelUpLearnsets.push([move, level]) }\n    }\n  })\n  return pokemon\n}\n\nexport default regexLevelUpLearnsets\n","async function getLevelUpLearnsets () {\n  const rawLevelUpLearnsets = await fetch('https://raw.githubusercontent.com/BuffelSaft/pokeemerald/master/src/data/pokemon/level_up_learnsets.h')\n  const textLevelUpLearnsets = await rawLevelUpLearnsets.text()\n\n  return textLevelUpLearnsets\n}\n\nexport default getLevelUpLearnsets\n","import altFormsLearnsets from './altFormsLearnsets'\n\nfunction regexTMHMLearnsets (textTMHMLearnsets, pokemon) {\n  const lines = textTMHMLearnsets.split('\\n')\n  let species = null\n\n  lines.forEach(line => {\n    const matchSpecies = line.match(/SPECIES_\\w+/i)\n    if (matchSpecies !== null) {\n      species = matchSpecies[0]\n    }\n\n    const matchTmhmMove = line.match(/TMHM\\d* *\\((\\w+ *\\d+) *_ *(\\w+)/i)\n    if (matchTmhmMove !== null) {\n      const TMHM = matchTmhmMove[1]\n      let move = matchTmhmMove[2]\n      if (move === 'SOLARBEAM') { move = 'SOLAR_BEAM' } // Fuck Oldplayer :)\n      move = `MOVE_${move}`\n\n      pokemon[species].TMHMLearnsets.push([move, TMHM])\n    }\n  })\n\n  return altFormsLearnsets(pokemon, 'forms', 'TMHMLearnsets')\n}\n\nexport default regexTMHMLearnsets\n","async function getTMHMLearnsets () {\n  const rawTMHMLearnsets = await fetch('https://raw.githubusercontent.com/BuffelSaft/pokeemerald/master/src/data/pokemon/tmhm_learnsets.h')\n  const textTMHMLearnsets = await rawTMHMLearnsets.text()\n\n  return textTMHMLearnsets\n}\n\nexport default getTMHMLearnsets\n","import altFormsLearnsets from './altFormsLearnsets'\nfunction regexEggMovesLearnsets (textEggMoves, pokemon) {\n  const lines = textEggMoves.split('\\n')\n  const speciesString = JSON.stringify(Object.keys(pokemon))\n  let key = null\n\n  lines.forEach(line => {\n    if (/egg_moves/i.test(line)) { key = null }\n    const matchMove = line.match(/MOVE_\\w+/i)\n    if (matchMove !== null) {\n      const move = matchMove[0]\n      if (key !== null) { pokemon[key].eggMovesLearnsets.push(move) }\n    } else if (key === null) {\n      const matchLine = line.match(/(\\w+),/i)\n      if (matchLine !== null) {\n        const testSpecies = `SPECIES_${speciesString.match(matchLine[1])}`\n        if (speciesString.includes(testSpecies)) { key = testSpecies }\n      }\n    }\n  })\n\n  return altFormsLearnsets(pokemon, 'evolutionLine', 'eggMovesLearnsets')\n}\n\nexport default regexEggMovesLearnsets\n","async function getEggMovesLearnsets () {\n  const rawEggMoves = await fetch('https://raw.githubusercontent.com/BuffelSaft/pokeemerald/master/src/data/pokemon/egg_moves.h')\n  const textEggMoves = await rawEggMoves.text()\n\n  return textEggMoves\n}\n\nexport default getEggMovesLearnsets\n","import buildPokemonObj from './helpers/buildPokemonObj'\r\n\r\nbuildPokemonObj()\r\n"],"names":["textEvolution","pokemon","species","split","forEach","line","matchSpecies","match","matchEvoInfo","method","condition","targetSpecies","evolution","push","Object","keys","j","length","evolutionLine","Array","from","Set","input","output","async","textSpecies","lines","formsStart","ID","test","matchInt","parseInt","Number","isInteger","rawSpecies","fetch","text","pokemonValues","values","i","key","baseHP","baseAttack","baseDefense","baseSpAttack","baseSpDefense","baseSpeed","abilities","type1","type2","item1","item2","eggGroup1","eggGroup2","changes","levelUpLearnsets","TMHMLearnsets","eggMovesLearnsets","forms","sprite","evolutions","rawEvolution","textForms","speciesArray","rawForms","textBaseStats","regex","value","change","matchRegex","rawBaseStats","conversionTable","textLevelUpLearnsetsPointers","matchConversion","index","undefined","rawLevelUpLearnsetsPointers","textLevelUpLearnsets","matchLevelMove","level","move","rawLevelUpLearnsets","textTMHMLearnsets","matchTmhmMove","TMHM","rawTMHMLearnsets","textEggMoves","speciesString","JSON","stringify","matchMove","matchLine","testSpecies","includes","rawEggMoves","console","log"],"sourceRoot":""}